@model List<GreekRecruit.Models.PNM>

@{
    ViewData["Title"] = "Mass Email PNMs";
}

<head>
    <title>@ViewData["Title"] - GreekRecruit</title>
    <link rel="icon" type="image/png" href="~/images/greekrecruit_logo.png" />
    <!-- Bootstrap -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</head>

@{
    bool isAdmin = false;
    var username = User.Identity.Name;
    var context = Context.RequestServices.GetService(typeof(SqlDataContext)) as SqlDataContext;
    var user = context?.Users.FirstOrDefault(u => u.username == username);

    if (user?.role == "Admin")
    {
        isAdmin = true;
    }
}

<!-- Navbar -->
<nav class="navbar navbar-light bg-light p-3 d-flex justify-content-between">
    <div class="d-flex align-items-center gap-2">
        <a asp-controller="Home" asp-action="Index" class="navbar-brand d-flex align-items-center">
            <img src="/images/greekrecruit_logo.png" alt="Home" width="40" height="40" class="d-inline-block align-top">
            <span class="ms-2">Home</span>
        </a>

        <div class="dropdown">
            <button class="btn btn-danger dropdown-toggle" type="button" id="eventsDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                Events
            </button>
            <ul class="dropdown-menu" aria-labelledby="eventsDropdown">
                @if (isAdmin)
                {
                    <li><a class="dropdown-item" asp-controller="AddEvent" asp-action="Index">Add Event</a></li>
                }
                <li><a class="dropdown-item" asp-controller="Event" asp-action="Index">View Events</a></li>
            </ul>
        </div>

        <div class="dropdown">
            <button class="btn btn-danger dropdown-toggle" type="button" id="pnmsDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                PNMs
            </button>
            <ul class="dropdown-menu" style="white-space: nowrap; min-width: max-content;" aria-labelledby="pnmsDropdown">

                <li><a class="dropdown-item" asp-controller="AddPNM" asp-action="Index">Add PNM</a></li>
                @if (isAdmin)
                {
                    <li><a class="dropdown-item" asp-controller="AddPNM" asp-action="AddPNMCSV">Import PNMs from CSV</a></li>
                }
            </ul>
        </div>

        <div class="dropdown">
            <button class="btn btn-danger dropdown-toggle" type="button" id="formsDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                Interest Forms
            </button>
            <ul class="dropdown-menu" aria-labelledby="formsDropdown">
                @if (isAdmin)
                {
                    <li><a class="dropdown-item" asp-controller="InterestForm" asp-action="Create">Add Interest Form</a></li>
                }
                <li><a class="dropdown-item" asp-controller="InterestForm" asp-action="Index">View Forms/Submissions</a></li>
            </ul>
        </div>

        <div class="dropdown">
            <button class="btn btn-danger dropdown-toggle" type="button" id="interviewsDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                Interviews
            </button>
            <ul class="dropdown-menu" aria-labelledby="interviewsDropdown">
                <li><a class="dropdown-item" asp-controller="Interview" asp-action="Index">View Interview Schedule</a></li>
            </ul>
        </div>

    </div>


    <style>
        @@media (max-width: 576px) {
            #userMenuButton {
                width: 36px;
                height: 36px;
                font-size: 0.9rem;
                padding: 0.4rem;
            }

            .navbar-brand span {
                font-size: 1rem;
            }

            .navbar .dropdown-toggle::after {
                display: none;
            }
        }

        #userMenuButton {
            width: 42px;
            height: 42px;
            border-radius: 50%;
            background-color: #0d6efd;
            color: white;
            font-weight: bold;
            font-size: 1rem;
            display: flex;
            align-items: center;
            justify-content: center;
            border: none;
        }
    </style>

    <div class="d-flex align-items-center ms-auto">
        <div class="dropdown">
            <button class="btn dropdown-toggle" type="button" id="userMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                @User.Identity?.Name?.Substring(0, 1).ToUpper()
            </button>
            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userMenuButton">
                <li><a class="dropdown-item" asp-controller="Profile" asp-action="Index">Profile</a></li>
                <li><a class="dropdown-item" asp-controller="Dashboard" asp-action="Index">Stats & Insights</a></li>
                <li><a class="dropdown-item" asp-controller="Profile" asp-action="PointsCategories">Points System</a></li>
                @if (isAdmin)
                {
                    <li><a class="dropdown-item" asp-controller="Profile" asp-action="AddUsers">Add Users</a></li>
                    <li><a class="dropdown-item" asp-controller="Profile" asp-action="BatchAddUsers">Batch Add Users</a></li>
                    <li><a class="dropdown-item" asp-controller="AdminTask" asp-action="Index">View Tasks</a></li>
                }
                <li><a asp-action="Logout" class="dropdown-item text-danger">Logout</a></li>
            </ul>
        </div>
    </div>
</nav>


<!-- TempData Alerts -->
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show mx-3 mt-3" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show mx-3 mt-3" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}


<h2 class="text-center my-4">Mass Email PNMs</h2>

<form id="massEmailForm" method="post" class="container">
    @Html.AntiForgeryToken()

    <div class="mb-4">
        <label for="subject" class="form-label fw-bold">Subject</label>
        <input type="text" id="subject" name="Subject" class="form-control" autofocus/>
    </div>

    <div class="mb-4">
        <label for="message" class="form-label fw-bold">Message</label>
        <textarea id="message" name="Message" class="form-control" rows="5"></textarea>
    </div>



    <div class="row mb-4">
        <div class="col-md-6">
            <h4>Available PNMs</h4>
            <div id="pnmList" class="border rounded p-3 overflow-auto" style="height: 400px;">
                @foreach (var pnm in Model)
                {
                    if (!string.IsNullOrEmpty(pnm.pnm_email))
                    {
                        <div class="d-flex justify-content-between align-items-center border-bottom py-2">
                            <span>@pnm.pnm_fname @pnm.pnm_lname (@pnm.pnm_email)</span>
                            <button type="button" class="btn btn-sm btn-primary add-recipient" data-email="@pnm.pnm_email">Add</button>
                        </div>
                    }
                }
            </div>
        </div>

        <div class="col-md-6">
            <h4>Recipients</h4>
            <div id="recipientList" class="border rounded p-3 overflow-auto" style="height: 400px;">
                <!-- Added emails will appear here -->
            </div>
        </div>
    </div>

    <div class="text-center">
        <button type="button" id="sendEmailBtn" class="btn btn-success btn-lg">Send Email</button>
    </div>
</form>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const recipientSet = new Set();

        function addRecipient(email, addButton) {
            // Add to the set
            recipientSet.add(email);

            // Create recipient entry
            const recipientDiv = document.createElement('div');
            recipientDiv.className = 'd-flex justify-content-between align-items-center mb-2 p-2 border rounded';

            const emailSpan = document.createElement('span');
            emailSpan.textContent = email;

            const removeBtn = document.createElement('button');
            removeBtn.textContent = 'Remove';
            removeBtn.className = 'btn btn-sm btn-danger ms-2';
            removeBtn.addEventListener('click', function () {
                recipientSet.delete(email);
                recipientDiv.remove();
                if (addButton) {
                    addButton.disabled = false;
                    addButton.textContent = 'Add';
                    addButton.classList.remove('btn-secondary');
                    addButton.classList.add('btn-primary');
                }
            });

            recipientDiv.appendChild(emailSpan);
            recipientDiv.appendChild(removeBtn);

            document.getElementById('recipientList').appendChild(recipientDiv);
        }

        // Attach Add listeners
        document.querySelectorAll('.add-recipient').forEach(button => {
            button.addEventListener('click', function (e) {
                e.preventDefault();
                const email = this.getAttribute('data-email');
                if (!recipientSet.has(email)) {
                    addRecipient(email, this);

                    // Disable the add button after adding
                    this.disabled = true;
                    this.textContent = 'Added ✓';
                    this.classList.remove('btn-primary');
                    this.classList.add('btn-secondary');
                }
            });
        });

        document.getElementById('sendEmailBtn').addEventListener('click', function (e) {
            e.preventDefault();

            const subject = document.getElementById('subject').value.trim();
            const message = document.getElementById('message').value.trim();
            const recipients = Array.from(recipientSet);
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            if (!subject || !message) {
                alert('Subject and message are required.');
                return;
            }

            if (recipients.length === 0) {
                alert('Please add at least one recipient.');
                return;
            }

            fetch('/PNM/SendMassEmail', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({
                    Subject: subject,
                    Message: message,
                    Recipients: recipients
                })
            }).then(response => {
                if (response.ok) {
                    window.location.reload();
                } else {
                }
            }).catch(error => {
                console.error('Error sending emails:', error);
            });
        });
    });
</script>
